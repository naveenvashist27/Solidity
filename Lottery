// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract Lottery {
    address public manager;
    address payable[] public participants;

    constructor() {
        manager = msg.sender;
    }

    receive() external payable {
        require(msg.value == 1 ether);
        participants.push(payable(msg.sender));
    }

    function getbalance() public view returns (uint256) {
        require(msg.sender == manager);
        return address(this).balance;
    }

    function random() public view returns (uint256) {
        return
            uint256(
                keccak256(
                    abi.encodePacked(block.prevrandao,block.timestamp,  participants.length  )
                )
            );
    }
event WinnerSelected(address winner, uint256 amount);
    function selectwinner() public  {
        require(msg.sender == manager);
        require(participants.length >= 3);
        uint256 r = random();
        uint index=r%participants.length;
         address payable winner=participants[index];
        winner.transfer(getbalance());
        // participants = new address payable[](0) ;
        uint256 prizeAmount = getbalance();
        (bool sent, ) = winner.call{value: prizeAmount}("");
    require(sent, "Transfer failed");

    emit WinnerSelected(winner, prizeAmount);
        participants = new address payable[](0) ;

    }
}
